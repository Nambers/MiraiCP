name: C++ CI in windows & linux

on: 
  push:
    branches:
      - '*'
    paths:
      - "cpp/**"
  pull_request:
    branches:
      - '*'
    paths:
      - "cpp/**"
  workflow_dispatch:

jobs:
  single:
    name: "build MiraiCP-single (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-20.04
        include:
          - os: windows-2019
            targetName: MSVCX64
          - os: ubuntu-20.04
            targetName: LinuxX64
    env:
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      # Linux
      - name: setup gcc
        if: ${{ env.isUbuntu == 'true' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 9
          platform: x64
      - name: build with gcc ubuntu
        if: ${{ env.isUbuntu == 'true' }}
        env:
          cc: gcc
          cxx: g++
        run: ./scripts/LINUX/cppBuilds.sh single
      # Windows
      - name: setup MSVC
        if: ${{ env.isWindows == 'true' }}
        uses: ilammy/msvc-dev-cmd@v1.12.0
        with:
          arch: amd64
          vsversion: 2019
      - name: build with MSVC
        if: ${{ env.isWindows == 'true' }}
        run: ./scripts/WIN/cppBuilds.bat single

  windows-mingw-single:
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: build with MinGW
        run: ./scripts/WIN/cppBuilds.bat single mingw

  libLoader:
    name: "build MiraiCP-libLoader (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-20.04
        include:
          - os: windows-2019
            targetName: MSVCX64
          - os: ubuntu-20.04
            targetName: linuxX64
    env:
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      # Linux
      - name: setup gcc
        if: ${{ env.isUbuntu == 'true' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 9
          platform: x64
      - name: build with gcc ubuntu
        if: ${{ env.isUbuntu == 'true' }}
        env:
          cc: gcc
          cxx: g++
        run: ./scripts/LINUX/cppBuilds.sh libLoader
      # Windows
      - name: setup MSVC
        if: ${{ env.isWindows == 'true' }}
        uses: ilammy/msvc-dev-cmd@v1.12.0
        with:
          arch: amd64
          vsversion: 2019
      - name: build with MSVC
        if: ${{ env.isWindows == 'true' }}
        run: ./scripts/WIN/cppBuilds.bat libLoader

  libLoader-native:
    name: "build Native (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-20.04
        include:
          - os: windows-latest
            targetName: mingwX64
          - os: ubuntu-20.04
            targetName: linuxX64
    env:
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3.
      - name: setup gcc
        if: ${{ env.isUbuntu == 'true' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 9
          platform: x64
      - if: ${{ env.isUbuntu == 'true' }}
        name: build with gcc ubuntu
        env:
          cc: gcc
          cxx: g++
        run: ./scripts/LINUX/cppBuilds.sh libLoaderNative
      # Windows
      - name: build with MinGW win
        if: ${{ env.isWindows == 'true' }}
        run: ./scripts/WIN/cppBuilds.bat libLoaderNative
