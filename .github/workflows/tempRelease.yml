name: "tempRelease"

on:
 workflow_dispatch:
  inputs:
   v:
      required: true
      description: version tag
      type: string
   clean:
     required: false
     description: clean all dev release
     type: boolean
     default: false

jobs:
  build-libLoader-msvc-4-windows:
    if: ${{ github.event.inputs.clean == 'false' }}
    runs-on: windows-2019
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1.12.0
      with:
        arch: amd64
        vsversion: 2019
    - name: configure
      run: mkdir cpp/build && cd cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -DGOOGLE_TEST=OFF ..
    - name: build with gcc
      run: cd ./cpp && cmake --build build --config Release --target Loader && cmake --build build --config Release --target LoaderNative
    - name: copy out
      run: copy ./cpp/build/Release/*.dll && copy ./cpp/build/Release/*.lib
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: libLoaderdll
        path: |
          ./*.dll 
          ./*.lib
  build-libLoader-gcc-4-linux:
    if: ${{ github.event.inputs.clean == 'false' }}
    runs-on: ubuntu-20.04
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 9
        platform: x64
    - name: print glibc version
      run: ldd --version
    - name: configure
      env:
        cc: gcc
        cxx: g++
      run: mkdir cpp/build && cd cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -DGOOGLE_TEST=OFF ..
    - name: build with gcc
      run: cd cpp/build && make Loader && make LoaderNative
    - name: copy out
      run: cp ./cpp/build/*.so ./ && cp /lib/x86_64-linux-gnu/libcrypt.so.1 ./
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: libLoaderso
        path: |
          ./*.so
          ./libcrypt.so.1
  clean:
    if: ${{ github.event.inputs.clean == 'true' }}
    runs-on: ubuntu-20.04
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
       persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
       fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: prepare
      run: mkdir ./cleanTr
    - name: Push
      uses: s0/git-publish-subdir-action@develop 
      env:
        REPO: git@github.com:Nambers/MiraiCP-devReleases.git
        BRANCH: main # The branch name where you want to push the assets
        FOLDER: cleanTr # The directory where your assets are generated
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
        MESSAGE: "clean all" # The commit message
  
  build-native:
    name: "build Native (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-20.04
        include:
          - os: windows-latest
            targetName: mingwX64
          - os: ubuntu-20.04
            targetName: linuxX64
    env:
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\vcpkg\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up JDK 15
      uses: actions/setup-java@v2
      with:
        java-version: '15'
        distribution: 'adopt'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      # with:
      #   cache-read-only: ${{ github.ref != 'refs/heads/main' }}

    - name: Cache konan
      uses: pat-s/always-upload-cache@v3
      with:
        path: ~/.konan
        key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Prepare to cache vcpkg
      if: ${{ env.isWindows == 'true' }}
      run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}

    - name: Cache vcpkg
      if: ${{ env.isWindows == 'true' }}
      uses: pat-s/always-upload-cache@v3
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-binary-cache-

    - name: Install OpenSSL on Ubuntu
      if: ${{ env.isUbuntu == 'true' }}
      run: sudo apt install libssl-dev -y

    # Prepare environment for linking on Windows
    - name: Setup Memory Environment on Windows
      if: ${{ env.isWindows == 'true' }}
      run: >
        wmic pagefileset where name="D:\\pagefile.sys" set InitialSize=1024,MaximumSize=9216
      shell: cmd
      continue-on-error: true

    - name: Install OpenSSL & cURL on Windows
      if: ${{ env.isWindows == 'true' }}
      run: |
        echo "set(VCPKG_BUILD_TYPE release)" | Out-File -FilePath "$env:VCPKG_INSTALLATION_ROOT\triplets\x64-windows.cmake" -Encoding utf8 -Append
        vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows
        New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libcrypto.lib
        New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libssl.lib
        New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libcurl.lib
        echo "$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: chmod
      if: ${{ env.isUbuntu == 'true' }}
      run: chmod -R 777 *
    - name: replace def file
      uses: Nambers/ReplaceStringInFile@v1.3
      with:
        path: ${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def
        oldString: GITHUB_WORKSPACE
        newString: ${{ github.workspace }}
        showFileContent: true
    # - name: replace MiraiCP lib path of def file linux
    #   if: ${{ env.isUbuntu == 'true' }}
    #   run: sed -i 's|GITHUB_WORKSPACE|${{ github.workspace }}|g' '${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def' && cat ${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def
    # - name: replace MiraiCP lib path of def file win
    #   if: ${{ env.isWindows == 'true' }}
    #   run: $path = "${{ github.workspace }}"; $path=$path.Replace("`\", "/"); (Get-Content ${{ github.workspace }}\kotlin\shared\src\nativeInterop\cinterop\localMiraiCP.def) -replace 'GITHUB_WORKSPACE', $path | Set-Content -encoding ASCII ${{ github.workspace }}\kotlin\shared\src\nativeInterop\cinterop\localMiraiCP.def && type ${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def
    - name: complie native
      run:  cd ./kotlin/ && ./gradlew MiraiCP-loader:compileKotlinNative --warning-mode all --info --stacktrace
    - name: libLoaderNativeWin
      if: ${{ env.isWindows == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: libLoaderdll
        path: ${{ github.workspace }}
    - name: libLoaderNativeLinux
      if: ${{ env.isUbuntu == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: libLoaderso
        path: ${{ github.workspace }}
    # - if: ${{ env.isWindows == 'true' }}
    #   name: rename libLoader win
    #   run: Rename-Item -Path "${{ github.workspace }}\libLoaderNative.lib" -NewName "LoaderNative.lib"
    - name: link native
      run:  cd ./kotlin/ && ./gradlew MiraiCP-loader:linkDebugExecutableNative --warning-mode all --info --stacktrace
    
    - name: packing - linux
      if: ${{ env.isUbuntu == 'true' }}
      run: zip -j output.zip ${{ github.workspace }}/kotlin/loader/build/bin/native/debugExecutable/*.kexe libcrypt.so.1 libLoaderNative.so libLoader.so
    - name: packing -win
      if: ${{ env.isWindows == 'true' }}
      run: copy ${{ github.workspace }}/kotlin/loader/build/bin/native/debugExecutable/*.exe &&  tar -cvf output.zip *.exe libLoaderNative.dll libLoader.so
    - name: upload
      if: ${{ env.isWindows == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: winOutput
        path: ./output.zip
    - name: upload
      if: ${{ env.isUbuntu == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: linuxOutput
        path: ./output.zip
    
      
  tempRelease:
    needs: [build-libLoader-msvc-4-windows, build-libLoader-gcc-4-linux, build-native]
    if: ${{ github.event.inputs.clean == 'false' }}
    runs-on: ubuntu-20.04
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
       path: main
       persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
       fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: checkout
      uses: actions/checkout@v3
      with:
       path: tr
       repository: Nambers/MiraiCP-devReleases
       ref: main
       persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
       fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: Set up JDK 15
      uses: actions/setup-java@v2
      with:
        java-version: '15'
        distribution: 'adopt'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      # with:
      #   cache-read-only: ${{ github.ref != 'refs/heads/main' }}
    - name: chmod -R 777 *
      run: chmod -R 777 *
    - name: Build plugin
      run:  cd ./main/kotlin/ && ./gradlew MiraiCP-plugin:buildPlugin --warning-mode all --info --stacktrace
    - name: Build loader
      run:  cd ./main/kotlin/ && ./gradlew MiraiCP-loader:shadowJar --warning-mode all --info --stacktrace
    - name: configure
      env: 
        cc: gcc
        cxx: g++
      run: mkdir ./main/cpp/build && cd ./main/cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -DGOOGLE_TEST=OFF ..
    - name: build with gcc
      run: cd ./main/cpp/build && make generateSingleHeaders
    - name: moveCPP
      run: rm -rf ./tr/${{ github.event.inputs.v }} && mkdir ./tr/${{ github.event.inputs.v }} && mv "./main/cpp/single_include/MiraiCP.hpp" ./tr/${{ github.event.inputs.v }} && mv "./main/cpp/single_include/MiraiCP.cpp" ./tr/${{ github.event.inputs.v }}
    - name: moveKt
      run: ls -1 ./main/kotlin/loader/build/libs/MiraiCP-loader-*.jar | xargs -L1 -I{} mv {} ./tr/${{ github.event.inputs.v }} && ls -1 ./main/kotlin/plugin/build/mirai/MiraiCP-plugin-*.mirai2.jar | xargs -L1 -I{} mv {} ./tr/${{ github.event.inputs.v }} && ls -1 ./main/kotlin/core/build/libs/MiraiCP-core-*.jar | xargs -L1 -I{} mv {} ./tr/${{ github.event.inputs.v }}
    #name: print
     # run: find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
    - uses: actions/download-artifact@v3
      with:
        name: libLoaderdll
        path: ./tr/${{ github.event.inputs.v }}/
    - uses: actions/download-artifact@v3
      with:
        name: libLoaderso
        path: ./tr/${{ github.event.inputs.v }}/
    - uses: actions/download-artifact@v3
      with:
        name: winOutput
        path: ./tr/${{ github.event.inputs.v }}/
    - uses: actions/download-artifact@v3
      with:
        name: linuxOutput
        path: ./tr/${{ github.event.inputs.v }}/
    
    - name: mv
      run: mv ./tr/.git/ ./.git
    - name: Push
      uses: s0/git-publish-subdir-action@develop 
      env:
        REPO: git@github.com:Nambers/MiraiCP-devReleases.git
        BRANCH: main # The branch name where you want to push the assets
        FOLDER: tr # The directory where your assets are generated
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
        MESSAGE: "release dev package: ({sha})" # The commit message
