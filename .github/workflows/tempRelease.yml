name: "tempRelease"

on:
 workflow_dispatch:
  inputs:
   v:
      required: true
      description: version tag
   clean:
     required: false
     description: clean all dev release

jobs:
  build-libLoader-msvc-4-windows:
    if: ${{ !github.event.inputs.clean }}
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: configure
      env:
        cc: gcc
        cxx: g++
      run: mkdir cpp/build && cd cpp/build && cmake -DGOOGLE_TEST=OFF ..
    - name: build with gcc
      run: cd ./cpp && cmake --build build --config Release --target Loader
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: libLoaderdll
        path: ./cpp/build/Release/libLoader.dll
  build-libLoader-gcc-4-linux:
    if: ${{ !github.event.inputs.clean }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: configure
      env:
        cc: gcc
        cxx: g++
      run: mkdir cpp/build && cd cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -DGOOGLE_TEST=OFF ..
    - name: build with gcc
      run: cd cpp/build && make Loader
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: libLoaderso
        path: ./cpp/build/libLoader.so
  clean:
    if: ${{ github.event.inputs.clean }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
       persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
       fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: prepare
      run: mkdir ./cleanTr
    - name: Push
      uses: s0/git-publish-subdir-action@develop 
      env:
        REPO: git@github.com:Nambers/MiraiCP-devReleases.git
        BRANCH: main # The branch name where you want to push the assets
        FOLDER: cleanTr # The directory where your assets are generated
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
        MESSAGE: "clean all" # The commit message
      
  tempRelease:
    if: ${{ !github.event.inputs.clean }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
       path: main
       persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
       fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: checkout
      uses: actions/checkout@v2
      with:
       path: tr
       repository: Nambers/MiraiCP-devReleases
       ref: main
       persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
       fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: Set up JDK 15
      uses: actions/setup-java@v2
      with:
        java-version: '15'
        distribution: 'adopt'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}
    - name: chmod -R 777 *
      run: chmod -R 777 *
    - name: Build plugin
      run:  cd ./main/kotlin/ && ./gradlew MiraiCP-plugin:buildPlugin --warning-mode all --info --stacktrace
    - name: Build core
      run:  cd ./main/kotlin/ && ./gradlew MiraiCP-core:shadowJar --warning-mode all --info --stacktrace
    - name: Build loader
      run:  cd ./main/kotlin/ && ./gradlew MiraiCP-loader:shadowJar --warning-mode all --info --stacktrace
    - name: configure
      env: 
        cc: gcc
        cxx: g++
      run: mkdir ./main/cpp/build && cd ./main/cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -DGOOGLE_TEST=OFF ..
    - name: build with gcc
      run: cd ./main/cpp/build && make generateSingleHeaders
    - name: moveCPP
      run: rm -rf ./tr/${{ github.event.inputs.v }} && mkdir ./tr/${{ github.event.inputs.v }} && mv "./main/cpp/src/single_include/MiraiCP/MiraiCP.hpp" ./tr/${{ github.event.inputs.v }} && mv "./main/cpp/src/single_include/MiraiCP/MiraiCP.cpp" ./tr/${{ github.event.inputs.v }} && mv "./main/cpp/src/miraicp-core/core.cpp" ./tr/${{ github.event.inputs.v }} && mv "./main/cpp/src/miraicp-core/core.h" ./tr/${{ github.event.inputs.v }}
    - name: moveKt
      run: ls -1 ./main/kotlin/loader/build/libs/MiraiCP-loader-*.jar | xargs -L1 -I{} mv {} ./tr/${{ github.event.inputs.v }} && ls -1 ./main/kotlin/plugin/build/mirai/MiraiCP-plugin-*.mirai2.jar | xargs -L1 -I{} mv {} ./tr/${{ github.event.inputs.v }} && ls -1 ./main/kotlin/core/build/libs/MiraiCP-core-*.jar | xargs -L1 -I{} mv {} ./tr/${{ github.event.inputs.v }}
    #name: print
     # run: find . | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
    - uses: actions/download-artifact@v3
      with:
        name: libLoaderdll
        path: ./tr/${{ github.event.inputs.v }}/
    - uses: actions/download-artifact@v3
      with:
        name: libLoaderso
        path: ./tr/${{ github.event.inputs.v }}/
    - name: mv
      run: mv ./tr/.git/ ./.git
    - name: Push
      uses: s0/git-publish-subdir-action@develop 
      env:
        REPO: git@github.com:Nambers/MiraiCP-devReleases.git
        BRANCH: main # The branch name where you want to push the assets
        FOLDER: tr # The directory where your assets are generated
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
        MESSAGE: "release dev package: ({sha})" # The commit message
