name: Kotlin MPP Native CI with Gradle

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    paths:
      - "kotlin/loader/**"
      - "kotlin/shared/**"
      - "cpp/src/**"
      - ".github/workflows/native.yml"
  pull_request:
    branches:
      - '*'
    paths:
      - "kotlin/loader/**"
      - "kotlin/shared/**"
      - "cpp/src/**"
      - ".github/workflows/native.yml"

jobs:
  no-job:
    if: "!contains(github.event.commits[0].message, 'native')"
    runs-on: ubuntu-latest
    steps:
      - name: nope
        run: echo "hi"

  libLoader-native:
    name: "build libLoader-native (${{ matrix.os }})"
    if: "contains(github.event.commits[0].message, 'native')"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
        include:
          - os: windows-latest
            targetName: mingwX64
          - os: ubuntu-latest
            targetName: linuxX64
    env:
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    # - if: ${{ env.isWindows == 'true' }}
    #   name: Install Version Specific MinGW in win
    #   uses: coffeebe4code/setup-mingw@v1-beta-2
    #   with:
    #     platform: x64
    #     version: 10.2.0
    #     cygwin: 1

    - if: ${{ env.isUbuntu == 'true' }}
      name: build with gcc ubuntu
      env:
        cc: gcc
        cxx: g++
      run: mkdir cpp/build && cd cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -DGOOGLE_TEST=OFF .. && make LoaderNative
    
    - if: ${{ env.isWindows == 'true' }}
      name: build with gcc win
      env:
        cc: gcc
        cxx: g++
      run: mkdir cpp/build && cd cpp/build && cmake -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles" -DGOOGLE_TEST=OFF .. && cd .. && cmake --build build --target LoaderNative
    
    - if: ${{ env.isWindows == 'true' }}
      name: upload
      uses: actions/upload-artifact@v3
      with:
        name: libLoaderNativeWin
        path: ./cpp/build/src/libloader/native/libLoaderNative.a
    - if: ${{ env.isUbuntu == 'true' }}
      name: upload
      uses: actions/upload-artifact@v3
      with:
        name: libLoaderNativeLinux
        path: ./cpp/build/src/libloader/native/libLoaderNative.a

  build-native:
    name: "build Native (${{ matrix.os }})"
    if: "contains(github.event.commits[0].message, 'native')"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
        include:
          - os: windows-latest
            targetName: mingwX64
          - os: ubuntu-latest
            targetName: linuxX64
    env:
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\vcpkg\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Set up JDK 15
      uses: actions/setup-java@v2
      with:
        java-version: '15'
        distribution: 'adopt'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}

    - name: Cache konan
      uses: pat-s/always-upload-cache@v3
      with:
        path: ~/.konan
        key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Prepare to cache vcpkg
      if: ${{ env.isWindows == 'true' }}
      run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}

    - name: Cache vcpkg
      if: ${{ env.isWindows == 'true' }}
      uses: pat-s/always-upload-cache@v3
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-binary-cache-

    - if: ${{ env.isUbuntu == 'true' }}
      name: Install OpenSSL on Ubuntu
      run: sudo apt install libssl-dev -y

    # Prepare environment for linking on Windows
    - if: ${{ env.isWindows == 'true' }}
      name: Setup Memory Environment on Windows
      run: >
        wmic pagefileset where name="D:\\pagefile.sys" set InitialSize=1024,MaximumSize=9216 &
        net stop mongodb
      shell: cmd
      continue-on-error: true

    # - if: ${{ env.isWindows == 'true' }}
    #   name: Install Version Specific MinGW
    #   uses: coffeebe4code/setup-mingw@v1-beta-2
    #   with:
    #     platform: x64
    #     version: 10.2.0
    #     cygwin: 1

    - if: ${{ env.isWindows == 'true' }}
      name: Install OpenSSL & cURL on Windows
      run: |
        echo "set(VCPKG_BUILD_TYPE release)" | Out-File -FilePath "$env:VCPKG_INSTALLATION_ROOT\triplets\x64-windows.cmake" -Encoding utf8 -Append
        vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows
        New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libcrypto.lib
        New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libssl.lib
        New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libcurl.lib
        echo "$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - if: ${{ env.isUbuntu == 'true' }}
      name: chmod -R 777 *
      run: chmod -R 777 *

    - if: ${{ env.isUbuntu == 'true' }}
      name: replace MiraiCP lib path of def file linux
      run: sed -i 's|GITHUB_WORKSPACE|${{ github.workspace }}|g' '${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def' && cat ${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def
    - if: ${{ env.isWindows == 'true' }}
      name: replace MiraiCP lib path of def file win
      run: $path = "${{ github.workspace }}"; $path=$path.Replace("`\", "/"); (Get-Content ${{ github.workspace }}\kotlin\shared\src\nativeInterop\cinterop\localMiraiCP.def) -replace 'GITHUB_WORKSPACE', $path | Set-Content -encoding ASCII ${{ github.workspace }}\kotlin\shared\src\nativeInterop\cinterop\localMiraiCP.def && type ${{ github.workspace }}/kotlin/shared/src/nativeInterop/cinterop/localMiraiCP.def
    - name: complie native
      run:  cd ./kotlin/ && ./gradlew MiraiCP-loader:compileKotlinNative --warning-mode all --info --stacktrace
    - if: ${{ env.isWindows == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: libLoaderNativeWin
        path: ${{ github.workspace }}
    - if: ${{ env.isUbuntu == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: libLoaderNativeLinux
        path: ${{ github.workspace }}
    # - if: ${{ env.isWindows == 'true' }}
    #   name: rename libLoader win
    #   run: Rename-Item -Path "${{ github.workspace }}\libLoaderNative.lib" -NewName "LoaderNative.lib"
    - name: link native
      run:  cd ./kotlin/ && ./gradlew MiraiCP-loader:linkDebugExecutableNative --warning-mode all --info --stacktrace